---
# This file is a template, and might need editing before it works on your project.
# Build JAVA applications using Apache Maven (http://maven.apache.org)
# For docker image tags see https://hub.docker.com/_/maven/
#
# For general lifecycle information see https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
# 
# This template will build and test your projects as well as create the documentation.
# 
# * Caches downloaded dependencies and plugins between invocation.
# * Does only verify merge requests but deploy built artifacts of the
#   master branch.
# * Shows how to use multiple jobs in test stage for verifying functionality
#   with multiple JDKs.
# * Uses site:stage to collect the documentation for multi-module projects.
# * Publishes the documentation for `master` branch.
variables:
  # This will supress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true -Dmaven.test.redirectTestOutputToFile=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -Dspring.profiles.active=gitlab -s .deploy/settings.xml"
  # Postgres Configuration
  POSTGRES_DB: ingest-test
  POSTGRES_USER: runner
  POSTGRES_PASSWORD: ""

# Cache downloaded dependencies and plugins between builds.
cache:
  paths:
    - .m2/repository/

image: openjdk:8-slim

stages:
  - build
  - test
  - deploy

before_script:
  - apt-get update -y
  - apt-get install -y rsync mime-support graphviz

# Compile code and test code using JDK8
validate:openjdk:
  stage: build
  script:
    - ./mvnw $MAVEN_CLI_OPTS test-compile

# Verify builds pass tests using JDK8
# On the event a build fails, collect the output of all failed unit tests
verify:openjdk:
  stage: test
  services: 
    - postgres:9
  script:
    - ./mvnw $MAVEN_CLI_OPTS verify
  artifacts:
    when: on_failure
    expire_in: 2 days
    paths:
      - ./**/target/surefire-reports/*-output.txt
    reports:
      junit:
        - ./**/target/surefire-reports/TEST-*.xml


.deploy:base: &deploy_base
  stage: deploy
  only:
    - tags
  services:
    - postgres:9

# Call mvn deploy to upload artifacts for develop and releases (now tagged)
# To get this working you need to define a volume while configuring your gitlab-ci-multi-runner.
# Mount your `settings.xml` as `/root/.m2/settings.xml` which holds your secrets.
# See https://maven.apache.org/settings.html
deploy:openjdk:
  <<: *deploy_base
  script:
    - ./mvnw $MAVEN_CLI_OPTS deploy

# Build and upload rpms to the adapt-ci server
# Could have these be separate but for now run them together
deploy:rpms:
  <<: *deploy_base
  before_script:
    - apt-get update -y
    - apt-get install -y rsync rpm mime-support curl graphviz
  script:
    - ./build_rpms.sh
    - 'find rpms/RPMS -type f -exec curl -X PUT -u ${ARTIFACTORY_USER}:${ARTIFACTORY_PASS} https://lib-artifacts.ucsd.edu/artifactory/rpm/chronopolis/ -T {} \;'
